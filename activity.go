package unmarshaljsonrates

import (
	"encoding/json"
	"fmt"
	"log"
	"github.com/TIBCOSoftware/flogo-lib/core/activity"
	"github.com/TIBCOSoftware/flogo-lib/logger"
)

// ActivityLog is the default logger for the Log Activity
var activityLog = logger.GetLogger("activity-flogo-unmarshaljsonrates")

// MyActivity is a stub for your Activity implementation
type unmarshaljsonrates struct {
	metadata *activity.Metadata
}

// NewActivity creates a new activity
func NewActivity(metadata *activity.Metadata) activity.Activity {
	return &unmarshaljsonrates{metadata: metadata}
}

// Metadata implements activity.Activity.Metadata
func (a *unmarshaljsonrates) Metadata() *activity.Metadata {
	return a.metadata
}

//XSD
type AutoGenerated struct {
	Data struct {
		AverageEgressByteRatePerMinute  int    `json:"averageEgressByteRatePerMinute"`
		AverageEgressRatePerMinute      int    `json:"averageEgressRatePerMinute"`
		AverageIngressByteRatePerMinute int    `json:"averageIngressByteRatePerMinute"`
		AverageIngressRatePerMinute     int    `json:"averageIngressRatePerMinute"`
		CurrentEgressByteRatePerSecond  int    `json:"currentEgressByteRatePerSecond"`
		CurrentEgressRatePerSecond      int    `json:"currentEgressRatePerSecond"`
		CurrentIngressByteRatePerSecond int    `json:"currentIngressByteRatePerSecond"`
		CurrentIngressRatePerSecond     int    `json:"currentIngressRatePerSecond"`
		MsgVpnName                      string `json:"msgVpnName"`
		QueueName                       string `json:"queueName"`
	} `json:"data"`
	Links struct {
		URI string `json:"uri"`
	} `json:"links"`
	Meta struct {
		Request struct {
			Method string `json:"method"`
			URI    string `json:"uri"`
		} `json:"request"`
		ResponseCode int `json:"responseCode"`
	} `json:"meta"`
}

// end of XSD

// Eval implements activity.Activity.Eval
func (a *unmarshaljsonrates) Eval(ctx activity.Context) (done bool, err error) {

	JsonString := ctx.GetInput("jsonString").(string)

	activityLog.Debugf("Json String is : [%s]", JsonString)
	//fmt.Println("Json String is : ", JsonString)

	if len(JsonString) == 0 {
		activityLog.Debugf("value in the field is empty ")
		//fmt.Println("value in  the field is empty ")

	}
	//	JsonString = (string(JsonString))
	



	json_data := AutoGenerated{}
	err = json.Unmarshal([]byte(JsonString), &json_data)

	//jsondata, _ := json.Unmarshal(json_data)
	if err != nil {
		activityLog.Debugf("Error ", err)
		fmt.Println("error: ", err)
		return
	}
	
	fmt.Println("%+v",json_data.Data.AverageIngressRatePerMinute)
	fmt.Println(" JSON String ********************************** ")
	log.Println("%+v",json_data.Data.AverageIngressRatePerMinute)

	//fmt.Println(" JSON String ")
	//fmt.Println(string(jsondata))

	// Set the output as part of the context
	activityLog.Debugf("Activity has unmarshalled json Successfully")
	fmt.Println("Activity has unmarshalled json Successfull")

	ctx.SetOutput("avgingmsgrt", json_data.Data.AverageIngressRatePerMinute)

	return true, nil
}
